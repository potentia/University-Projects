import socket
import pycurl
from io import BytesIO
import os



def showBanner():
    """ Prints the logo of the program """
    print("    _____     _       ____  ____  ")
    print("   |_   _|   / \     |_   ||   _| ")
    print("     | |    / _ \      | |__| |   ")
    print(" _   | |   / ___ \     |  __  |   ")
    print("| |__' | _/ /   \ \_  _| |  | |_  ")
    print("`.____.'|____| |____||____||____| ")


def checkPort(target, portnum):
    """ Checks port numbers with the socket module. Takes 2 arguments 1 for the IP the other for port number"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # Creating an object of socket called sock with the
    # first parameter designating what type of address you can interface with.
    # The second is designating that we are going to be using tcp
    print("Testing port " + str(portnum))  # Outputs the port that is being tested
    try:  # If a successful connection is made then True is returned if not False is returned
        sock.connect((target, portnum))
        print("Port" + str(portnum) + " is open")
        return True
    except:
        return False


def setTarget():
    """ Sets the target IP by asking for user input then returns it"""
    return input("Enter target IP/URL: ")


def fastPortScan(target):
    """ Fast port scanner(Common Ports) that calls the checkPort function and takes 1 argument which is the target """
    print("Scanning...")
    openPorts = []  # Creating an empty list for the open ports
    for ports in [7, 19, 20, 21, 22, 23, 25, 42, 43, 49, 53, 67, 68, 69, 70, 79, 80, 88, 102, 110, 113, 119, 123, 135,
                  137, 139, 143, 161, 162, 177, 179, 201, 264, 318, 381, 383, 389, 411, 412, 443, 445, 464, 465, 497,
                  500, 512, 513, 514, 515, 520, 521, 540, 554, 546, 547, 560, 563, 587, 591, 593, 631, 636, 639, 646,
                  691, 860, 873, 902, 989, 990, 993, 995, 1025, 1026, 1029, 1080, 1194, 1214, 1241, 1311, 1337, 1433,
                  1434, 1512, 1589, 1701, 1723, 1725, 1741, 1755, 1812, 1813, 1863, 1985, 2000, 2002, 2049, 2082, 2083,
                  2100, 2222, 2302, 2483, 2484, 2745, 2967, 3050, 3074, 3124, 3127, 3128, 3222, 3260, 3306, 3389, 3689,
                  3690, 3724, 3784, 3785, 4333, 4444, 4664, 4672, 4899, 5000, 5001, 5004, 5005, 5050, 5060, 5190, 5222,
                  5223, 5432, 5500, 5554, 5631, 5632, 5800, 5900, 6000, 6001, 6112, 6129, 6257, 6436, 6347, 6500, 6566,
                  6588, 6665, 6669, 6679, 6697, 6699, 6881, 6891, 6970, 6999, 7212, 7648, 7649, 8000, 8080, 8086, 8087,
                  8118, 8200, 8500, 8767, 8866, 9100, 9101, 9103, 9119, 9800, 9898, 9988, 9999, 10000, 10113, 10116,
                  11371, 12035, 12036, 12345, 13720, 13721, 14567, 15118, 19226, 19638, 20000, 24800, 25999, 27015,
                  27374, 28960, 31337, 33434]:  # Iterates through this lit of common ports
        if checkPort(target, ports) is True:  # If checkPort returns true it adds the port to the  openPorts list
            openPorts.append(str(ports))
    return openPorts  # When every port has been iterated through the loop breaks and the openPorts list is returned


def deepPortScan(target):
    """ Port scanner that checks every port. calls the checkPort function and takes 1 argument which is the target """
    print("Scanning...")
    openPorts = []  # Creating an empty list for the open ports
    for ports in range(0, 65535):  # Iterates through all ports from 0 to 65535
        if checkPort(target, ports) is True:   # If checkPort returns true it adds the port to the openPorts list
            openPorts.append(str(ports))
    return openPorts   # When every port has been iterated through the loop breaks and the openPorts list is returned


def checkURL(url):
    """ Return if the code is not 404  from the web server, False if no success at all """
    buffer = BytesIO()  # BytesIO function called to create an amount of binary digits this is set to a buffer
    c = pycurl.Curl()  # Creating an instance of pycurl.Curl() called "c"
    c.setopt(c.URL, url)  # Setting the url we want to check
    c.setopt(c.WRITEDATA, buffer)  # Setting a buffer to WRITEDATA to suppress the output of the perform() method
    c.perform()  # Performs the operations above
    code = c.getinfo(c.HTTP_CODE)  # Using getinfo to check the HTTP_CODE and setting it to code
    if code != 404:  # If the code is anything but 404 then return true and let the user know what code it was
        print("Request for %s gives a code of %d" % (url, code))
        return True
    print("Request for %s gives a code of %d" % (url, code))
    return False  # Returns false if code is 404 meaning nothing is there


def urlDirForce(root):
    """ Tries a standard list of common web directories to see if any exist on the target from the given root URL """
    directorys = []  # Holds possible Directory's

    dirs = ["admin", "administrator", "backup", "config",
            "cpanel", "data", "images", "panel", "proxy", "staff",
            "uploads", "upload", "user", "users", "webmaster"]  # List of dirs to try

    root = root.strip()  # Take off any white space from the root given

    if not root.lower().startswith("http://"):  # Check the root starts with http://
        root = "http://" + root

    if root[-1] != "/":  # Make sure it ends with /
        root = root + "/"

    for i in dirs:  # Now run the check for every dir
        if checkURL(root + i) is True:
            directorys.append("/" + i)  # Adds possible directory's to the list
    return directorys  # list is returned after loop


def checkAnonFTP(target, port=21):
    """ Returns True if the target appears to be running an anonymous FTP service. False otherwise. Defaults to
    checking on port 21 """
    s = socket.socket()  # Create a new instance of socket
    s.connect((target, port))  # The variables target and port are passed in
    data = s.recv(100)

    s.send(b"USER anonymous\n")  # Sends the user name as "anonymous" as bytes
    data = s.recv(100)

    s.send(b"PASS anonymous\n")  # Sends the password as "anonymous" as bytes
    data = s.recv(100)

    s.close()
    if data.startswith(b"230"):  # Checks for the code 230 which means a connection was made
        print("Anonymous FTP enabled")
        return True
    return False


def enumLocalUsers():
    """ Checks the /etc/passwd which contains information about the users of the target"""
    with open("/etc/passwd") as f:  # Opening the file and assigning it to f
        for l in f:  # Iterating through every line in the file
            print(l.split(":")[0])  # Spiting the file at ":" and print only the first item in the list


def findSetUID():
    """ Find programs in the executable folders that have the Setuid bit  """
    print("These are the files that have Setuid \n")
    os.system("find /bin /sbin /usr/bin -perm /4000")  # Makes use of the of the os module to run the command
    # Looks for the "-perm /4000" which means that the program has a Setuid bit



if __name__ == "__main__":
    option = " "
    target = None
    showBanner()
    while not option[0] in ["q", "Q"]:
        print("\nTarget: " + str(target))
        print("\n1. Set target")
        if target is not None:
            print("2. Port scan target - Fast Scan(Common Ports)")
            print("3. Port scan target - Deep Scan(All Ports)")
            print("4. URL directory brute-force")
            print("5. Test for anonymous FTP")
        print("6. Enumerate local users")
        print("7. Find local setuid files")
        print("Q. Quit")
        option = input("\nChoose an option: ")
        if option[0] == "1":
            target = setTarget()
        elif option[0] == "2":
            print("Open Ports !!! \n\n" + str(fastPortScan(target)))  # Prints the open ports for fast scan
        elif option[0] == "3":
            print("Open Ports !!! \n\n" + str(deepPortScan(target)))  # Prints the open ports for deep scan
        elif option[0] == "4":
            print("Possible Directory's \n\n" + str(urlDirForce(target)))  # Prints possible directory's from web server
        elif option[0] == "5":
            checkAnonFTP(target)
        elif option[0] == "6":
            enumLocalUsers()
        elif option[0] == "7":
            findSetUID()
        elif option[0] in ["Q", "q"]:
            break
        else:
            print("Unknown option\n\n")
